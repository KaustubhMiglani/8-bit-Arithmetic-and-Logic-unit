/* 16 bit adder using 4-bit CLA with higher propagate and generate terms*/
/* type is for signed or umsigned and sign is for addition or subtraction*/
CHIP claHigh{
    IN x[16],y[16],sign,type;
    OUT z[16],of;
    PARTS:
     
    Not(in=sign,out=b);
    Not(in=b,out=c0);

    Xor(a=y[15],b=c0,out=w15);
    Xor(a=y[14],b=c0,out=w14);
    Xor(a=y[13],b=c0,out=w13);
    Xor(a=y[12],b=c0,out=w12);
    Xor(a=y[11],b=c0,out=w11);
    Xor(a=y[10],b=c0,out=w10);
    Xor(a=y[9],b=c0,out=w9);
    Xor(a=y[8],b=c0,out=w8);
    Xor(a=y[7],b=c0,out=w7);
    Xor(a=y[6],b=c0,out=w6);
    Xor(a=y[5],b=c0,out=w5);
    Xor(a=y[4],b=c0,out=w4);
    Xor(a=y[3],b=c0,out=w3);
    Xor(a=y[2],b=c0,out=w2);
    Xor(a=y[1],b=c0,out=w1);
    Xor(a=y[0],b=c0,out=w0);
   
/* propagate and generate terms*/
    Xor(a=x[15],b=w15,out=p15);
    And(a=x[15],b=w15,out=g15);
    Xor(a=x[14],b=w14,out=p14);
    And(a=x[14],b=w14,out=g14);
    Xor(a=x[13],b=w13,out=p13);
    And(a=x[13],b=w13,out=g13);
    Xor(a=x[12],b=w12,out=p12);
    And(a=x[12],b=w12,out=g12);
    Xor(a=x[11],b=w11,out=p11);
    And(a=x[11],b=w11,out=g11);
    Xor(a=x[10],b=w10,out=p10);
    And(a=x[10],b=w10,out=g10);
    Xor(a=x[9],b=w9,out=p9);
    And(a=x[9],b=w9,out=g9);
    Xor(a=x[8],b=w8,out=p8);
    And(a=x[8],b=w8,out=g8);
    Xor(a=x[7],b=w7,out=p7);
    And(a=x[7],b=w7,out=g7);
    Xor(a=x[6],b=w6,out=p6);
    And(a=x[6],b=w6,out=g6);
    Xor(a=x[5],b=w5,out=p5);
    And(a=x[5],b=w5,out=g5);
    Xor(a=x[4],b=w4,out=p4);
    And(a=x[4],b=w4,out=g4);
    Xor(a=x[3],b=w3,out=p3);
    And(a=x[3],b=w3,out=g3);
    Xor(a=x[2],b=w2,out=p2);
    And(a=x[2],b=w2,out=g2);
    Xor(a=x[1],b=w1,out=p1);
    And(a=x[1],b=w1,out=g1);
    Xor(a=x[0],b=w0,out=p0);
    And(a=x[0],b=w0,out=g0);
/*higher level propagate and genearte terms(p0 and g0 represented by s10 and t10 and c4*/    
    And(a=p3,b=p2,out=q0);
    And(a=q0,b=p1,out=q1);
    And(a=q1,b=p0,out=s10);
    And(a=q1,b=g0,out=b0);
    And(a=q0,b=g1,out=b1);
    And(a=p3,b=g2,out=b2);
    Or(a=b0,b=b1,out=b3);
    Or(a=b3,b=b2,out=b4);
    Or(a=b4,b=g3,out=t10);
    And(a=s10,b=c0,out=q2);
    Or(a=q2,b=t10,out=c4);
/*higher level propagate and genearte terms(p1 and g1 represented by s11 and t11 and c8*/ 
    And(a=p7,b=p6,out=e0);
    And(a=e0,b=p5,out=e1);
    And(a=e1,b=p4,out=s11);
    And(a=e1,b=g4,out=a0);
    And(a=e0,b=g5,out=a1);
    And(a=p7,b=g6,out=a2);
    Or(a=a0,b=a1,out=a3);
    Or(a=a3,b=a2,out=a4);
    Or(a=a4,b=g7,out=t11);
    And(a=s11,b=c4,out=e2);
    Or(a=e2,b=t11,out=c8);
/*higher level propagate and genearte terms(p2 and g2 represented by s12 and t12 and c12*/ 
    And(a=p11,b=p10,out=h0);
    And(a=h0,b=p9,out=h1);
    And(a=h1,b=p8,out=s12);
    And(a=h1,b=g8,out=i0);
    And(a=h0,b=g9,out=i1);
    And(a=p11,b=g10,out=i2);
    Or(a=i0,b=i1,out=i3);
    Or(a=i3,b=i2,out=i4);
    Or(a=i4,b=g11,out=t12);
    And(a=s12,b=c8,out=h2);
    Or(a=h2,b=t12,out=c12);
/*higher level propagate and genearte terms(p3 and g3 represented by s13 and t13 and c16*/ 
    And(a=p15,b=p14,out=j0);
    And(a=j0,b=p13,out=j1);
    And(a=j1,b=p12,out=s13);
    And(a=j1,b=g12,out=k0);
    And(a=j0,b=g13,out=k1);
    And(a=p15,b=g14,out=k2);
    Or(a=k0,b=k1,out=k3);
    Or(a=k3,b=k2,out=k4);
    Or(a=k4,b=g15,out=t13);
    And(a=s13,b=c12,out=j2);
    Or(a=j2,b=t13,out=c16);
/* c1,c2,c3 from c0*/
    And(a=p0,b=c0,out=d0);
    Or(a=d0,b=g0,out=c1); 
    And(a=d0,b=p1,out=d1);
    And(a=p1,b=g0,out=d2);
    Or(a=d1,b=d2,out=d3);
    Or(a=d3,b=g1,out=c2);
    And(a=d1,b=p2,out=d4);
    And(a=d2,b=p2,out=d5);
    And(a=p2,b=g1,out=d6);
    Or(a=d4,b=d5,out=d7);
    Or(a=d7,b=d6,out=d8);
    Or(a=d8,b=g2,out=c3);   
/* c5,c6,c7 from c4*/
    And(a=p4,b=c4,out=l0);
    Or(a=l0,b=g4,out=c5); 
    And(a=l0,b=p5,out=l1);
    And(a=p5,b=g4,out=l2);
    Or(a=l1,b=l2,out=l3);
    Or(a=l3,b=g5,out=c6);
    And(a=l1,b=p6,out=l4);
    And(a=l2,b=p6,out=l5);
    And(a=p2,b=g5,out=l6);
    Or(a=l4,b=l5,out=l7);
    Or(a=l7,b=l6,out=l8);
    Or(a=l8,b=g6,out=c7); 
  /* c9,c10,c11 from c8*/  
    And(a=p8,b=c8,out=m0);
    Or(a=m0,b=g8,out=c9); 
    And(a=m0,b=p9,out=m1);
    And(a=p9,b=g8,out=m2);
    Or(a=m1,b=m2,out=m3);
    Or(a=m3,b=g9,out=c10);
    And(a=m1,b=p10,out=m4);
    And(a=m2,b=p10,out=m5);
    And(a=p10,b=g9,out=m6);
    Or(a=m4,b=m5,out=m7);
    Or(a=m7,b=m6,out=m8);
    Or(a=m8,b=g10,out=c11);  
 /* c13,c14,c15 from c12*/  
    And(a=p12,b=c12,out=n0);
    Or(a=n0,b=g12,out=c13); 
    And(a=n0,b=p13,out=n1);
    And(a=p13,b=g12,out=n2);
    Or(a=n1,b=n2,out=n3);
    Or(a=n3,b=g13,out=c14);
    And(a=n1,b=p14,out=n4);
    And(a=n2,b=p14,out=n5);
    And(a=p14,b=g13,out=n6);
    Or(a=n4,b=n5,out=n7);
    Or(a=n7,b=n6,out=n8);
    Or(a=n8,b=g14,out=c15); 
/* final sum*/
    Xor(a=p15,b=c15,out=z[15]);
    Xor(a=p14,b=c14,out=z[14]);
    Xor(a=p13,b=c13,out=z[13]);
    Xor(a=p12,b=c12,out=z[12]);
    Xor(a=p11,b=c11,out=z[11]);
    Xor(a=p10,b=c10,out=z[10]);
    Xor(a=p9,b=c9,out=z[9]);
    Xor(a=p8,b=c8,out=z[8]);
    Xor(a=p7,b=c7,out=z[7]);
    Xor(a=p6,b=c6,out=z[6]);
    Xor(a=p5,b=c5,out=z[5]);
    Xor(a=p4,b=c4,out=z[4]);
    Xor(a=p3,b=c3,out=z[3]);
    Xor(a=p2,b=c2,out=z[2]);
    Xor(a=p1,b=c1,out=z[1]);
    Xor(a=p0,b=c0,out=z[0]);
 /* overflow based on whether it is signed or unsigned*/       
    Not(in=type,out=nottype);
    Not(in=c16,out=f0);
    Not(in=c15,out=f1);
    And(a=type,b=f0,out=f2);
    And(a=f2,b=c15,out=f3);
    And(a=nottype,b=c16,out=f4);
    And(a=c16,b=f1,out=f5);
    Or(a=f3,b=f4,out=f6);
    Or(a=f6,b=f5,out=of); 
}